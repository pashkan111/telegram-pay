from os import pathconf
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery
from loader import dp, bot
from .states import AuthState
from aiogram.dispatcher.filters import Command
from keyboards.choise_buttons import choise, choise2, accoun, choise3, button_3000, button_300, button_30000, button_change
from asgiref.sync import sync_to_async
import hashlib
from urllib.parse import quote
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from config import EMAIL_PASSWORD, HOST, EMAIL_FROM, EMAIL_TO
import re


def get_description(price, service, net):
    if price == 30000:
        price = '30 000'
    description = f'–û–ø–ª–∞—Ç–∞ {price}—Ä—É–± –∑–∞ –æ–∫–∞–∑–∞–Ω–∏–µ —É—Å–ª—É–≥–∏: "{service}", –æ–±—ä–µ–∫—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {net} '
    result = quote(description, safe='/')
    return result


def make_hash(price, phone, telegram_id):
    hash_obj = hashlib.md5(f"infsectest_ru:{price}:0:qNI1cl89rPWbFMkb9Ls0:Shp_phone={phone}:Shp_telegram={telegram_id}".encode())
    return hash_obj.hexdigest()


@sync_to_async
def post_data_to_email(data, HOST=HOST, FROM=EMAIL_FROM, TO=EMAIL_TO,PASSWORD=EMAIL_PASSWORD):
    try:
        phone=data['phone']
        telegram_id=data['telegram_id']
        service=data['service']
        social_net=data['social_net']
        link=data['link']
        final_price = data['price']
    except KeyError as ke:
        return ke
    SUBJECT = f"–ó–∞–∫–∞–∑\n–£—Å–ª—É–≥–∞: {service}\n–°–æ—Ü–∏–∞–ª—å–Ω–∞—è —Å–µ—Ç—å:{social_net}, —Å—Å—ã–ª–∫–∞:{link}\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n–¶–µ–Ω–∞: {final_price}\ntelegram_id: {telegram_id}"
    import smtplib
    from email.mime.multipart import MIMEMultipart
    from email.mime.text import MIMEText
    msg = MIMEMultipart('alternative')
    msg['Subject'] = "–ó–∞–∫–∞–∑"
    msg['From'] = FROM
    msg['To'] = TO
    body = MIMEText(SUBJECT)
    msg.attach(body)
    username = FROM
    PASSWORD = PASSWORD
    try:
        try:
            server = smtplib.SMTP_SSL(HOST)
        except:
            return 990
        try:
            server.login(username, PASSWORD)
        except:
            return 998
        try:
            server.sendmail(FROM, TO, msg.as_string())
        except:
            return 100000
        server.quit()
        return True
    except Exception:
        return 400


@sync_to_async
def make_link(data):
    phone=data['phone']
    net = data['social_net']
    telegram_id=data['telegram_id']
    service=data['service']
    final_price = data['price']
    md5 = make_hash(final_price, phone, telegram_id)
    description = get_description(final_price, service, net)
    link_to_pay = f"https://auth.robokassa.ru/Merchant/Index.aspx?MerchantLogin=infsectest_ru&InvId=0&Culture=ru&Encoding=utf-8&Shp_phone={phone}&Shp_telegram={telegram_id}&OutSum={final_price}&Description={description}&SignatureValue={md5}"
    return link_to_pay


permitted = [
    '–∞–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏', '—É–∑–Ω–∞—Ç—å, –ø—ã—Ç–∞–ª–∏—Å—å –ª–∏ –≤–∑–ª–æ–º–∞—Ç—å', '–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥', '—Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ', '–∞–Ω–∞–ª–∏–∑ —É—Ç–µ—á–µ–∫'
    ]

nets = ['–≤–∫–æ–Ω—Ç–∞–∫—Ç–µ', 'instagram', 'facebook', 'email', 'web-—Å–∞–π—Ç—ã –∏ cms —Å–∏—Å—Ç–µ–º—ã',]

dic = {}


@dp.message_handler(Command('start'))
async def answer(message: types.Message):
    username = message.from_user.full_name
    telegram_id = message.from_user.id
    await AuthState.social_net.set()
    image = InputFile(path_or_bytesio='handlers/images/im.png')
    text = f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {username} üëã\n\n üì± IST-detector –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å —Ä–µ—à–∏—Ç—å –í–∞–º –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —Å—Ñ–µ—Ä–µ –∑–∞—â–∏—Ç—ã –¥–∞–Ω–Ω—ã—Ö, —Ç–∞–∫–∂–µ —è –º–æ–≥—É –ø—Ä–æ–≤–µ—Å—Ç–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –í–∞—à–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–∑–ª–æ–º–∞'
    await bot.send_photo(telegram_id, image, caption=text)
    await message.answer('–° –∫–∞–∫–æ–π –∏–∑ —Å–∏—Å—Ç–µ–º –±—É–¥–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å?', reply_markup=choise2)


@dp.message_handler(state=AuthState.social_net)
async def get_social(message: types.Message, state: FSMContext):
    social_net = message.text
    if not social_net.lower() in nets:
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö')
        return
    await state.update_data(social_net=social_net)
    if social_net.lower() == 'web-—Å–∞–π—Ç—ã –∏ cms —Å–∏—Å—Ç–µ–º—ã':
        await message.answer('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–π —Å–∞–π—Ç –Ω–∞ –ø–æ–ø—ã—Ç–∫–∏ –≤–∑–ª–æ–º–∞ üîì\n\n '\
                        '–£–∑–Ω–∞–π—Ç–µ, –∫—Ç–æ —Ö–æ—Ç–µ–ª –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –í–∞—à–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è–º, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º –∏ —Å–ø–∏—Å–∫–∞–º –¥—Ä—É–∑–µ–π üîé\n\n –ü–æ–ª—É—á–∏—Ç–µ –∏—Å—á–µ—Ä–ø—ã–≤–∞—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é üìÇ –æ —Ä–∏—Å–∫–∞—Ö —É—Ç–µ—á–∫–∏ –¥–∞–Ω–Ω—ã—Ö, –æ–± –æ–±—â–∏—Ö —Ä–∏—Å–∫–∞—Ö –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –∏ –≤–∫–ª—é—á–∏—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ò–ë, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—Ç—å ‚ö†Ô∏è  –í–∞—Å –æ–±–æ –≤—Å–µ—Ö –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞—Ö, —Ñ–∏–∫—Å–∏—Ä—É–µ–º—ã—Ö –Ω–∞—à–∏–º —Ü–µ–Ω—Ç—Ä–æ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.', reply_markup=choise)
    else:
        await message.answer(f'–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç {social_net} –Ω–∞ –ø–æ–ø—ã—Ç–∫–∏ –≤–∑–ª–æ–º–∞ üîì\n\n '\
                        '–£–∑–Ω–∞–π—Ç–µ, –∫—Ç–æ —Ö–æ—Ç–µ–ª –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –í–∞—à–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è–º, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º –∏ —Å–ø–∏—Å–∫–∞–º –¥—Ä—É–∑–µ–π üîé\n\n –ü–æ–ª—É—á–∏—Ç–µ –∏—Å—á–µ—Ä–ø—ã–≤–∞—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é üìÇ –æ —Ä–∏—Å–∫–∞—Ö —É—Ç–µ—á–∫–∏ –¥–∞–Ω–Ω—ã—Ö, –æ–± –æ–±—â–∏—Ö —Ä–∏—Å–∫–∞—Ö –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –∏ –≤–∫–ª—é—á–∏—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ò–ë, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—Ç—å ‚ö†Ô∏è  –í–∞—Å –æ–±–æ –≤—Å–µ—Ö –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞—Ö, —Ñ–∏–∫—Å–∏—Ä—É–µ–º—ã—Ö –Ω–∞—à–∏–º —Ü–µ–Ω—Ç—Ä–æ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.', reply_markup=choise)
    await AuthState.next()


@dp.message_handler(state=AuthState.service)
async def get_service(message: types.Message, state: FSMContext):
    service = message.text
    if not service.lower() in permitted:
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö')
        return
    await state.update_data(service=service)
    await message.answer('–£–∫–∞–∂–∏—Ç–µ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç (—Å—Å—ã–ª–∫—É –Ω–∞ –Ω–µ–≥–æ, id, –ª–æ–≥–∏–Ω) üë§', reply_markup=types.ReplyKeyboardRemove())
    await AuthState.next()


@dp.message_handler(state=AuthState.link)
async def get_link(message: types.Message, state: FSMContext):
    link = message.text
    await state.update_data(link=link)
    data = await state.get_data()
    telegram_id = int(message.from_user.id)
    dic.setdefault(telegram_id, data)
    service = data['service']
    await state.finish()
    if service.lower() == '—É–∑–Ω–∞—Ç—å, –ø—ã—Ç–∞–ª–∏—Å—å –ª–∏ –≤–∑–ª–æ–º–∞—Ç—å':
        await message.answer('–Ø –ø–æ–º–æ–≥—É —É–∑–Ω–∞—Ç—å, –∑–∞–∫–∞–∑—ã–≤–∞–ª–∏ –ª–∏ –≤–∑–ª–æ–º –í–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ Darknet –∏–ª–∏ —É –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ö–∞–∫–µ—Ä–æ–≤. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—é –í–∞–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ü–µ–ª–µ–≤—ã–º –∞—Ç–∞–∫–∞–º, –∏—Ö –¥–∞—Ç–∞–º –∏ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏.', reply_markup=button_3000)

    elif service.lower() == '–∞–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏':
        await message.answer('–ë—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω –∞–Ω–∞–ª–∏–∑ –í–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–∞ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ä–∏—Å–∫–∏ –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞.', reply_markup=button_300)
    
    elif service.lower() == '–∞–Ω–∞–ª–∏–∑ —É—Ç–µ—á–µ–∫':
        await message.answer('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∑–ª–∞–º—ã–≤–∞–ª–∏ –ª–∏ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∏ –µ—Å—Ç—å –ª–∏ —Ä–∏—Å–∫ —É—Ç–µ—á–∫–∏ –¥–∞–Ω–Ω—ã—Ö.', reply_markup=button_300)

    elif service.lower() == '–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥':
        await message.answer(text='–£–∫–∞–∂–∏—Ç–µ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –í–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ –æ–ø–ª–∞—Ç–∏—Ç–µ —É—Å–ª—É–≥—É. –û—Ç—á–µ—Ç—ã –±—É–¥—É—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å—Å—è –Ω–∞ –í–∞—à Telegram –≤ —Ñ–æ—Ä–º–∞—Ç–µ Secret Chat. –ü–µ—Ä–≤—ã–π –æ—Ç—á–µ—Ç —á–µ—Ä–µ–∑ 2 –¥–Ω—è –ø–æ—Å–ª–µ –∑–∞–∫–∞–∑–∞ üëá', reply_markup=button_change)

    elif service.lower() == '—Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ':
        await message.answer('–ï—Å–ª–∏ —É –í–∞—Å –ø—Ä–æ–∏–∑–æ—à–µ–ª –∏–Ω—Ü–∏–¥–µ–Ω—Ç –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ (—Ç–∞–∫ –Ω–∞–∑—ã–≤–∞–µ–º–æ–≥–æ "–≤–∑–ª–æ–º–∞") üï∑ –≤ –∞–∫–∫–∞—É–Ω—Ç. –ú—ã –º–æ–∂–µ–º –ø–æ–º–æ—á—å –Ω–∞–π—Ç–∏ –∑–ª–æ—É–º—ã—à–ª–µ–Ω–Ω–∏–∫–∞. –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –º—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Å–≤–µ–¥–µ–Ω—å—è –æ–± –∏–Ω—Ü–∏–¥–µ–Ω—Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –í–∞–º —Å–∞–º–∏–º –ø–æ–Ω—è—Ç—å, –≤ —á–µ–º –ø—Ä–∏—á–∏–Ω–∞ –∏ –∫—Ç–æ –º–æ–≥ –±—ã—Ç—å –ó–∞–∫–∞–∑—á–∏–∫–æ–º. –í –∫–∞–∂–¥–æ–º –≤—Ç–æ—Ä–æ–º —Å–ª—É—á–∞–µ –º—ã —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω–µ—á–Ω–æ–≥–æ –ó–∞–∫–∞–∑—á–∏–∫–∞. –í –æ–¥–Ω–æ–º –∏–∑ —Ç—Ä–µ—Ö —Å–ª—É—á–∞–µ–≤ –Ω–∞–º —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é —É–¥–∞–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è, –∏ –ó–∞–∫–∞–∑—á–∏–∫–∞. –í –æ–¥–Ω–æ–º –∏–∑ –¥–µ—Å—è—Ç–∏ —Å–ª—É—á–∞–µ–≤ —Å–æ–±—Ä–∞—Ç—å –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å–Ω—É—é –±–∞–∑—É üìÅ', reply_markup=button_30000)


@dp.callback_query_handler(text_contains='choise250')
async def del_keywords(call: CallbackQuery, state: FSMContext):
    await call.answer(cache_time=60)
    await AuthState.price.set()
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ‚òéÔ∏è, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É.')
    await state.update_data(price=250)
    await AuthState.next()


@dp.callback_query_handler(text_contains='choise800')
async def del_keywords(call: CallbackQuery, state: FSMContext):
    await call.answer(cache_time=60)
    await AuthState.price.set()
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ‚òéÔ∏è, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É.')
    await state.update_data(price=800)
    await AuthState.next()


@dp.callback_query_handler(text_contains='choise4500')
async def del_keywords(call: CallbackQuery, state: FSMContext):
    await call.answer(cache_time=60)
    await AuthState.price.set()
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ‚òéÔ∏è, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É.')
    await state.update_data(price=4500)
    await AuthState.next()


@dp.callback_query_handler(text_contains='choise30000')
async def del_keywords(call: CallbackQuery, state: FSMContext):
    await call.answer(cache_time=60)
    await AuthState.price.set()
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ‚òéÔ∏è, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É.')
    await state.update_data(price=30000)
    await AuthState.next()


@dp.callback_query_handler(text_contains='choise3000')
async def del_keywords(call: CallbackQuery, state: FSMContext):
    await call.answer(cache_time=60)
    await AuthState.price.set()
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ‚òéÔ∏è, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É.')
    await state.update_data(price=3000)
    await AuthState.next()


@dp.callback_query_handler(text_contains='choise300')
async def del_keywords(call: CallbackQuery, state: FSMContext):
    await call.answer(cache_time=60)
    await AuthState.price.set()
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ‚òéÔ∏è, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É.', reply_markup=types.ReplyKeyboardRemove())
    await state.update_data(price=300)
    await AuthState.next()


# @dp.message_handler(state=AuthState.link)
# async def get_link(message: types.Message, state: FSMContext):
#     link = message.text
#     await state.update_data(link=link)
#     await AuthState.next()
#     await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É. ‚òéÔ∏è', reply_markup=types.ReplyKeyboardRemove())


@dp.message_handler(state=AuthState.phone)
async def get_phone(message: types.Message, state: FSMContext):
    phone = message.text
    try:
        phone = int(phone)
    except ValueError:
        await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞')
        return
    await state.update_data(phone=phone)
    telegram_id = int(message.from_user.id)
    data = await state.get_data()
    data.setdefault('telegram_id', telegram_id)
    for key, value in data.items():
        dic[telegram_id].setdefault(key, value)
    link = await make_link(dic[telegram_id])
    await state.finish()
    button_link = InlineKeyboardMarkup(row_width=3).add(InlineKeyboardButton('–û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ –†–æ–±–æ–∫–∞—Å—Å—É ', url=link))
    await message.answer('–í—ã –º–æ–∂–µ—Ç–µ –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—å –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¢–µ–ª–µ–≥—Ä–∞–º–º (–≤—ã—à–µ) –∏–ª–∏ —á–µ—Ä–µ–∑ –≤–Ω–µ—à–Ω–∏–π —Å–µ—Ä–≤–∏—Å –†–æ–±–æ–∫–∞—Å—Å–∞, –æ–¥–∏–Ω –∏–∑ –≤–µ–¥—É—â–∏—Ö –≤ –†–§ üí≥', reply_markup=button_link)
    button_recv = InlineKeyboardMarkup(row_width=3).add(InlineKeyboardButton('–î–æ–≥–æ–≤–æ—Ä, —Ä–µ–∫–≤–∏–∑–∏—Ç—ã ', url='https://infsectest.ru/docs/offer.pdf'))
    await message.answer('–û—Ç—á–µ—Ç –æ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ –±—É–¥–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –í–∞–º –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–ª—Å—è –∑–∞–∫–∞–∑ üìã\n\n –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –í–∞–º —Ç–∞–∫–∂–µ —Å—Å—ã–ª–∫—É –Ω–∞ –¥–æ–≥–æ–≤–æ—Ä –æ–∫–∞–∑–∞–Ω–∏—è —É—Å–ª—É–≥, –≥–¥–µ –í—ã —Å–º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –≥–∞—Ä–∞–Ω—Ç–∏—è–º–∏ –∏ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞–º–∏ –†–æ—Å—Å–∏–π—Å–∫–æ–≥–æ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –ª–∏—Ü–∞, —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –±–æ–ª–µ–µ 15 –ª–µ—Ç –Ω–∞ —Ä—ã–Ω–∫–µ. –¢–∞–º –∂–µ –í—ã –Ω–∞–π–¥–µ—Ç–µ –Ω–∞—à–∏ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã üëá', reply_markup=button_recv)
    await post_data_to_email(dic[telegram_id])
    dic.pop(telegram_id)


